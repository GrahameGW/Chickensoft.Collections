name: 'ðŸ“¦ Release'
on:
  # Make a release whenever we push a version tag.
  push:
    tags:
      - 'v*'
  # Make a release whenever the developer wants.
  workflow_dispatch:
    inputs:
      bump:
        type: string
        description: "major, minor, or patch"
        required: true
        default: "patch"
  # Make a release whenever we're told to by another workflow.
  workflow_call:
    secrets:
      NUGET_API_KEY:
        description: "API key for Nuget"
        required: true
      GH_BASIC:
        description: "PAT"
        required: true
    # Input unifies with the workflow dispatch since it's identical.
    inputs:
      bump:
        type: string
        description: "major, minor, or patch"
        required: true
        default: "patch"
jobs:
  release:
    name: 'ðŸ“¦ Release'
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ§¾ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_BASIC }}
          lfs: true
          submodules: 'recursive'

      - name: ðŸ”Ž Read Current Project Verson
        uses: KageKirin/get-csproj-version@v1.0.0
        id: current-version
        with:
          file: Chickensoft.GoDotCollections/Chickensoft.GoDotCollections.csproj
          xpath: /Project/PropertyGroup/Version

      - name: ðŸ–¨ Print Current Version
        run: |
          echo "Current Version: ${{ steps.current-version.outputs.version }}"

      - name: ðŸ§® Compute Next Version
        uses:  chickensoft-games/next-godot-csproj-version@v1
        id: next-version
        with:
          project-version: ${{ steps.current-version.outputs.version }}
          godot-version: global.json
          bump: ${{ github.event.inputs.bump }}

      - uses: actions/setup-dotnet@v3
        name: ðŸ’½ Setup .NET SDK
        with:
          # Use the .NET SDK from global.json in the root of the repository.
          global-json-file: global.json

      - name: ðŸ“¦ Build
        run: dotnet build Chickensoft.GoDotCollections/Chickensoft.GoDotCollections.csproj -c Release

      - name: ðŸ”Ž Get Package Path
        id: package-path
        run: |
          package=$(find ./Chickensoft.GoDotCollections/nupkg -name "*.nupkg")
          echo "package=$package" >> "$GITHUB_OUTPUT"
          echo "ðŸ“¦ Found package: $package"

      - name: âœ¨ Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_BASIC }}
        run: |
          version="v${{ steps.next-version.outputs.version }}"
          gh release create --title "$version" --generate-notes "$version" \
            "${{ steps.package-path.outputs.package }}"

      - name: ðŸ›œ Publish to Nuget
        run: |
          dotnet nuget push "${{ steps.package-path.outputs.package }}" --api-key "${{ secrets.NUGET_API_KEY }}" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
